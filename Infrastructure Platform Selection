* Based on requirement i am designing the Infrastructure into 3 layer model
i.e Presentation Layer, Application Layer, Data Layer. So in this architecture i am using (Cloud Run/GKE) for Front end application, (GKE) for backend application and (Cloud Sql) Postgresql db.
* Google Cloud Run is a serverless compute platform which allows developers to deploy containerized applications without having to manage the underlying infrastructure. Reason choosing cloud run is since its serverless we dont need manual intervension to manage infrastructure , Scalability, Fast deployment, Pay-as-you-go,  etc.
* For backend application i am proposing Google Kubernetes Engine which is also an Orchestraion tool, we will create standard k8s cluster in private network. Reason behind choosing this service is we have microservice architecture and we will be having multiple backend applications which needs to communicate with each other and using k8s we can manage all the applications in same cluster with different ns and we can scale load based on peak seasonn with the help of HPA and since we are using private cluster we can have more security restrictons in the cluster and we can manage incoming traffic and outgoing traffic with NAT/INternetet gateways, by using regional cluster we can build HA cluster and in DR scenarios and with multiple applications hosted in k8s helps us in managing the billing instead of using VM. With gke we can integrate ingress controller which act as load balancer/reverse proxy.
* For Database i am using Cloud Sql which is a managed serice of GCP which gives us HA when we set-up multiple replica's in different region and reason behind using Cloud SQl is we have privilage of not managing database or increasing read write operations or troubleshooting user access issues. With cloud sql we can create storage size with required CPU/MEM and we can increase based on load. We have query insight which gives us detailed informaton on queries and we have good visualization dashboard where we can analyze CPU/MEM utilizations, R/W operations, Active connections and we can modify also.
* For monitoring i am implementing EFK(Elastic Fluent Kibana) which is an open-source and we can manage the tool and create index where we can specify what kind of data we want to store and we can take backup and delete older index data along with this we can integrate APM which gives us more info on application API request time, errors on application.
* Other monitoring tool is Prometheus/Grafana which is an oepn source tool which we gives us info on pods and node level resources.
* For alerting we can use Slack and Pagerduty.
I have attached the architecture diagram for more info.
